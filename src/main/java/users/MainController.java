package users;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private IncomingRecordRepository incomingRecordRepository;
	@Autowired
	private OutgoingRecordRepository outgoingRecordRepository;

	@GetMapping(path="/addIncoming") // Map ONLY GET Requests
	public @ResponseBody String addNewIncomingRecord (
			@RequestParam String name,
			@RequestParam String food,
			@RequestParam Double weight) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		IncomingRecord ir = new IncomingRecord();
		ir.setId(1);
		ir.setName(name);
		ir.setFood(food);
		ir.setWeight(weight);
		incomingRecordRepository.save(ir);
		return "Saved";
	}

	@GetMapping(path="/addOutgoing") // Map ONLY GET Requests
	public @ResponseBody String addNewOutoingRecord (
			@RequestParam String name,
			@RequestParam String food,
			@RequestParam Double weight) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		OutgoingRecord or = new OutgoingRecord();
		or.setId(1);
		or.setName(name);
		or.setFood(food);
		or.setWeight(weight);
		outgoingRecordRepository.save(or);
		return "Saved";
	}

	@GetMapping(path="/allIncoming")
	public @ResponseBody Iterable<IncomingRecord> getAllIncomingUsers() {
		// This returns a JSON or XML with the users
		return incomingRecordRepository.findAll();
	}

	@GetMapping(path="/allOutgoing")
	public @ResponseBody Iterable<OutgoingRecord> getAllOutgoingUsers() {
		// This returns a JSON or XML with the users
		return outgoingRecordRepository.findAll();
	}
}